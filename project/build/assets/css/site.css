/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/**
 * Profound Grid
 * 
 * Built in Sass (SCSS) this responsive/adaptive grid supports both fixed and fluid layouts, 
 * relative and fixed gutters, as well as your choice of semantic markup or generic '.grid-x' classes.
 * 
 * The biggest difference to other grid systems is the use of negative margins for column
 * placements, avoiding the subpixel rounding issues that usually break/uglify fluid layouts
 * in some browsers.
 * 
 * Nested columns are supported too, without having to reset the grid on each level. 
 *
 * Credits/Inspiration:
 * -------------------
 * Semantic Grid: http://www.semantic.gs
 * Susy: http://susy.oddbird.net
 * Negative Grid: http://chrisplaneta.com/freebies/negativegrid-fluid-css-grid-by-chris-planeta/
 *
 * @author Profound Creative Studio
 * @url http://www.profoundgrid.com
 * @url http://www.weareprofound.com 
 */
/**
 * Clearfix
 */
/**
 * Legacy Clearfix
 */
/**
 * Establish the grid-containing element.
 */
/**
 * Align an element to the grid.
 */
/**
 * Apply to any column to make it the last one of the current row.
 */
html {
  font-size: 75%;
  -webkit-font-smoothing: antialiased; }

@media only screen and (min-width: 320px) {
  html {
    font-size: 81.25%; } }

@media only screen and (min-width: 480px) {
  html {
    font-size: 87.5%; } }

@media only screen and (min-width: 640px) {
  html {
    font-size: 93.75%; } }

@media only screen and (min-width: 800px) {
  html {
    font-size: 100%; } }

@media only screen and (min-width: 960px) {
  html {
    font-size: 112.5%; } }

@media only screen and (min-width: 1140px) {
  html {
    font-size: 125%; } }

body {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  font-weight: 200;
  color: #666666;
  font-family: Frutiger, "Frutiger Linotype", Univers, Calibri, "Gill Sans", "Gill Sans MT", "Myriad Pro", Myriad, "DejaVu Sans Condensed", "Liberation Sans", "Nimbus Sans L", Tahoma, Geneva, "Helvetica Neue", Helvetica, sans-serif; }

h1, h2, h3, h4, h5, h6 {
  color: #222222;
  font-weight: 200;
  text-rendering: optimizeLegibility;
  font-family: "Gill Sans MT", "Gill Sans", Tahoma, Geneva, sans-serif; }

h1 {
  font-size: 38px;
  line-height: 48px;
  margin-bottom: 24px;
  margin-top: 48px;
  font-size: 2.375rem;
  line-height: 3rem;
  margin-bottom: 1.5rem;
  margin-top: 3rem; }

h2 {
  font-size: 28px;
  line-height: 48px;
  margin-bottom: 24px;
  margin-top: 48px;
  font-size: 1.75rem;
  line-height: 3rem;
  margin-bottom: 1.5rem;
  margin-top: 3rem; }

h3 {
  font-size: 21px;
  line-height: 24px;
  margin-bottom: 24px;
  margin-top: 24px;
  font-size: 1.3125rem;
  line-height: 1.5rem;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem; }

h4, h5, h6 {
  font-size: 16px;
  line-height: 24px;
  margin-bottom: 24px;
  margin-top: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem; }

p {
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem; }

ul, ol {
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem; }

ul ul, ol ol, ul ol, ol ul {
  margin-top: 0;
  margin-bottom: 0; }

dl dt {
  font-weight: 700; }
dl dd {
  font-style: italic; }

table {
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem;
  border-collapse: collapse;
  position: relative;
  table-layout: fixed;
  width: 100%; }
  table tr, table th, table td {
    margin: 0; }
  table td {
    line-height: 1.5; }

thead, tfoot, tbody {
  width: 100%; }

caption {
  line-height: 1.5; }

blockquote {
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem;
  font-style: italic; }

blockquote > p {
  padding: 0; }

a {
  text-decoration: none;
  color: #2ecc71; }
  a:hover {
    text-decoration: none;
    color: #2ecc71; }

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #2ecc71;
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem;
  padding: 0; }

sup, sub {
  vertical-align: baseline;
  position: relative;
  top: -0.4rem; }

sub {
  top: 0.4rem; }

b {
  line-height: 1; }

small {
  line-height: 1; }

strong {
  font-weight: 700;
  line-height: 1; }

em, dfn, cite, q {
  line-height: 1.5; }

dfn {
  font-weight: 700; }

pre, code, kbd {
  font-family: Monaco, "Lucida Sans Typewriter", Consolas, "Courier New", monospace; }

pre {
  white-space: pre;
  margin-bottom: 24px;
  margin-top: 24px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem; }

pre, code {
  line-height: 1.5; }

kbd {
  position: relative;
  top: -1px;
  margin-bottom: 1px;
  padding: 0 0; }

pre {
  word-break: break-all;
  word-wrap: break-word;
  white-space: pre;
  white-space: -moz-pre-wrap;
  white-space: pre-wrap;
  white-space: pre\9; }

/*
    pesticide v0.1.0 . @mrmrs . MIT
*/
/*# sourceMappingURL=data:application/json;base64,*/